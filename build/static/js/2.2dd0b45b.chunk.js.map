{"version":3,"sources":["components/account/Profile.js"],"names":["Profile","dateOfAllotment","user","useUser","userData","_useState","useState","_useState2","Object","F_IIITA_PROJECTS_manage_hostel_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isSending","setIsSending","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_Spinner__WEBPACK_IMPORTED_MODULE_4__","loading","size","Date","roomAllotedAt","className","FormInput","description","type","isDisabled","value","name","email","disable","onClick","authServices","forgotPassword","then","data","console","log","status","toast","success","catch","error","react_spinners_PulseLoader__WEBPACK_IMPORTED_MODULE_5___default","color","react_hot_toast__WEBPACK_IMPORTED_MODULE_7__","position","isRoomAlloted","Fragment","RoomNumber","concat","getDate","getMonth","getFullYear","props","placeholder","defaultValue","disabled"],"mappings":"0PAOe,SAASA,IAAU,IAG5BC,EAFcC,EAASC,cAAnBC,SADwBC,EAEEC,oBAAS,GAFXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEzBK,EAFyBH,EAAA,GAEdI,EAFcJ,EAAA,GAIhC,IAAKL,EAAM,OAAOU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,SAAUd,EAAMe,KAAM,MAC7Cf,IACFD,EAAkB,IAAIiB,KAAKhB,EAAKiB,gBAclC,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,sBACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,mBACbR,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uCAEFF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,mBACfR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACbR,EAAAC,EAAAC,cAACO,EAAD,CACEC,YAAY,OACZC,KAAK,OACLC,YAAY,EACZC,MAAOvB,EAAKwB,OAEdd,EAAAC,EAAAC,cAACO,EAAD,CACEC,YAAY,QACZC,KAAK,OACLC,YAAY,EACZC,MAAOvB,EAAKyB,QAMdf,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACbR,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQc,QAASlB,EAAWmB,QAvChB,WACpBlB,GAAa,GACbmB,IAAaC,eAAe7B,EAAKyB,OAAOK,KAAK,SAACC,GAC5CC,QAAQC,IAAIF,GACW,YAAnBA,EAAKA,KAAKG,SACXC,IAAMC,QAAQ,qCACd3B,GAAa,MAEf4B,MAAM,SAACC,GACR7B,GAAa,OA+BJD,EACCE,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAa6B,MAAO,UAAWzB,KAAM,KAErC,2BAGJL,EAAAC,EAAAC,cAAC6B,EAAA,QAAD,CAASC,SAAS,eAEnB1C,EAAK2C,cACJjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAACO,EAAD,CACEC,YAAY,OACZC,KAAK,OACLC,YAAY,EACZC,MAAOvB,EAAK6C,aAEdnC,EAAAC,EAAAC,cAACO,EAAD,CACEC,YAAY,YACZC,KAAK,OACLC,YAAY,EACZC,MAAK,GAAAuB,OAAK/C,EAAgBgD,UAArB,KAAAD,OAAkC/C,EAAgBiD,WAAlD,KAAAF,OAAgE/C,EAAgBkD,kBAIzFvC,EAAAC,EAAAC,cAACO,EAAD,CACEC,YAAY,OACZC,KAAK,OACLC,YAAY,EACZC,MAAO,wBASrB,IAAMJ,EAAY,SAAC+B,GACjB,OACExC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACbR,EAAAC,EAAAC,cAAA,aAAQsC,EAAM9B,aACdV,EAAAC,EAAAC,cAAA,SACES,KAAM6B,EAAM7B,KACZ8B,YAAaD,EAAMC,YACnBC,aAAcF,EAAM3B,MACpB8B,SAAUH,EAAM5B","file":"static/js/2.2dd0b45b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./../../assets/css/profile.css\";\r\nimport { useUser } from \"./../../context/userContext\";\r\nimport Spinner from \"./../Spinner\";\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport authServices from \"../../services/authServices\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nexport default function Profile() {\r\n  const { userData: user } = useUser();\r\n  const [isSending, setIsSending] = useState(false);\r\n  var dateOfAllotment;\r\n  if (!user) return <Spinner loading={!user} size={100} />;\r\n  if (user) {\r\n    dateOfAllotment = new Date(user.roomAllotedAt);\r\n  }\r\n  const resetPassword = () => {\r\n    setIsSending(true);\r\n    authServices.forgotPassword(user.email).then((data)=>{\r\n      console.log(data);\r\n       if(data.data.status===\"success\"){\r\n         toast.success('Email has been sent successfully.')\r\n         setIsSending(false);\r\n       }\r\n    }).catch((error) => {\r\n      setIsSending(false);\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"profile__section\">\r\n      <div className=\"profile__container\">\r\n        <div className=\"profile__Header\">\r\n          <h1>Profile </h1>\r\n          <p>Your personal information</p>\r\n        </div>\r\n        <div className=\"profile__photo\"></div>\r\n        <div className=\"userData\">\r\n          <FormInput\r\n            description=\"Name\"\r\n            type=\"text\"\r\n            isDisabled={true}\r\n            value={user.name}\r\n          />\r\n          <FormInput\r\n            description=\"Email\"\r\n            type=\"text\"\r\n            isDisabled={true}\r\n            value={user.email}\r\n          />\r\n          {/* <FormInput description=\"Semester\" type=\"text\" isDisabled={true} value={user.sem}/>\r\n          <FormInput description=\"Section\" type=\"text\" isDisabled={true} value={user.sec}/>\r\n          <FormInput description=\"Branch\" type=\"text\" isDisabled={true} value={user.branch}/> */}\r\n\r\n          <div className=\"profile__items\">\r\n            <label>Password</label>\r\n            <button disable={isSending} onClick={resetPassword}>\r\n              {isSending ? (\r\n                <PulseLoader color={\"#0a138b\"} size={10} />\r\n              ) : (\r\n                \"Reset password by email\"\r\n              )}\r\n            </button>\r\n            <Toaster position=\"top-right\" />\r\n          </div>\r\n          {user.isRoomAlloted ? (\r\n            <>\r\n              <FormInput\r\n                description=\"Room\"\r\n                type=\"text\"\r\n                isDisabled={true}\r\n                value={user.RoomNumber}\r\n              />\r\n              <FormInput\r\n                description=\"AllotedAt\"\r\n                type=\"text\"\r\n                isDisabled={true}\r\n                value={`${dateOfAllotment.getDate()}/${dateOfAllotment.getMonth()}/${dateOfAllotment.getFullYear()}`}\r\n              />\r\n            </>\r\n          ) : (\r\n            <FormInput\r\n              description=\"Room\"\r\n              type=\"text\"\r\n              isDisabled={true}\r\n              value={\"Not Alloted yet!\"}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FormInput = (props) => {\r\n  return (\r\n    <div className=\"profile__items\">\r\n      <label>{props.description}</label>\r\n      <input\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        defaultValue={props.value}\r\n        disabled={props.isDisabled}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}